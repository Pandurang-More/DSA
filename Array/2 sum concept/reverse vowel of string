Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

 

Example 1:

Input: s = "IceCreAm"

Output: "AceCreIm"

Explanation:

The vowels in s are ['I', 'e', 'e', 'A']. On reversing the vowels, s becomes "AceCreIm".

Example 2:

Input: s = "leetcode"

Output: "leotcede"

 

Constraints:

1 <= s.length <= 3 * 105
s consist of printable ASCII characters.



class Solution {
public:

     bool isvowel(char ch)
     {    

        ch=tolower(ch);
        return (ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'); // check vowel
       
     }
    string reverseVowels(string s) 
    {
        int n=s.length();
        int start=0;
        int end=n-1;
        while(start<end)
        {
        while(start<end && !isvowel(s[start]))start++; // check if strt point to consonant if it true just move to nest char. no swap here
        while(start<end && !isvowel(s[end])) end--;    // check if end point to consonant if it true just move to nest char. not swap here
        {
            if(start<end)
            {
                swap(s[start],s[end]);     // swap only both pointer points to vowel
                start++;
                end--;
            }
            
        }
        }
        return s;
    }
};
