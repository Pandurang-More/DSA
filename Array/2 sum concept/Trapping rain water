Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1].
In this case, 6 units of rain water (blue section) are being trapped.

Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


# optimized
TIme complexity:O(n)
space complextiy:O(1)

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int index;
        int water=0;
        int leftmax=height[0];
        int rightmax=height[n-1];
        int max=height[0];
        for(int i=0;i<n;i++)
        {
            if(height[i]>max)
            {
              max=height[i];     // find the tallest building
              index=i;
            }
        }

        for(int i=0;i<index;i++)
        {
            if(height[i] >leftmax)
            leftmax=height[i];                     // go from leftside to the tallest building
            else
            water+=(leftmax-height[i]);

        }


        for(int i=n-1;i>index;i--)
        {
            if(height[i]>rightmax)
            rightmax=height[i];                  // go from rightside to tallest building.
            else
            water+=(rightmax-height[i]);
        }


        return water;
    }
};
