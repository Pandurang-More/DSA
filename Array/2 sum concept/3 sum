
# brute force:
class Solution {
  public:
    bool hasTripletSum(vector<int> &arr, int target) 
{
      for(int i=0;i<n-2;i++)
 {
   for(int j=i+1;j<n-1;j++)
    {
      for(int k=0;k<n;k++)
       {
          if(arr[i]+arr[j]+arr[k]== target)
          return {i,j,k};
          
       }
    }
}
   return {};
                        
 }
           };



TIme complexity:O(n*n*n)


# we can solved this problem by also binary + two sum as like we do in 2 sum method. O(n*n*logn)



# optmized:o(n*n)

class Solution {
  public:
    bool hasTripletSum(vector<int> &arr, int target) {
        // Code Here
         sort(arr.begin(),arr.end());
        int n=arr.size();
        for(int i=0;i<n-2;i++)
        {  
             int ans=target-arr[i];
            int start=i+1, end=n-1;
            while(start<end)
            {
                if(arr[start]+arr[end]==ans)
                return true;
                else if(arr[start]+arr[end]<ans)
                start++;
                else
                end--;
            }
            
        }
        return false;
    }
};
