Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, 
find two numbers such that they add up to a specific target number.
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].


# Brute force
this approach alos work for non sorted array.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
{
      int n=nums.size();
      for(int i=0;i<n-1;i++)   //  goes till second laste element 
      {
        for(int j=i+1;j<n;j++)  // goes till last element
        {
           if(nums[i]+nums[j]==target)
           return {i,j};
        }
      }
     return {};
  }
};

# using binary method:

class Solution {
public:
    vector<int> twoSum(vector<int>&nums, int target) {  // vector<int>  allow returning multiple input
      int n=nums.size();
      
      for(int i=0;i<n-1;i++)
      {
        int x=target - nums[i];
       
       int start=i+1,end=n-1;
     int mid=(start+end)/2;
       while(start<=end)
        {
         if (nums[mid]==x)
         return {i,mid};
         else if(nums[mid]<x)
         start=mid+1;
         else
         end=mid-1;        }
      }
     return {};
    }
};

time complexity :O(nlogn)



# Two Pointer


Class Solution
{  
public:
vector<int>twosum(vector<int>&nums, int target)
 {
int n=nums.size.
int start=0;
int end=n-1;
while(start<end)
   {
  if(nums[start]+nums[end]==target)
  return { start,end};
  else if(nums[start]+nums[end]<target)
  start++;
  else
  end--;
    }
return {};
 }

};

Time complexity : O(n);
this work only if array is sorted if array is unsorted it wont work , then we have to use hashmap will also work with same time complexity.
