
Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

#brute force:
int maxSubArraySum(int arr[],int n)
{
int maxi=INT_MIN;
 {
   for(int i=0;i<n;i++)
  {
     int prefix=0;
     for(int j=i;j<n;j++)
    {
    prefix+=arr[i];
    maxi-max(prefix,maxi);
    }
  }
return maxi;
 }
}




better approach:


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxi=INT_MIN;
        int prefix=0;
        for(int i=0;i<n;i++)
        {
           prefix+=nums[i];
           maxi=max(prefix,maxi);
           if(prefix<0)      
           prefix=0;
           
          }
        return maxi;
    }
};
Time complexity :0(n)
