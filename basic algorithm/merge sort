tc: O(nlogn) in all cases
sc: O(n) for temperary array,out of place algorithm



class Solution {
public:

void combine(vector<int>&arr,int start,int mid,int end){
    vector<int>temp(end-start+1);
    int index=0;
    int left=start;
    int right=mid+1;
    while(left<=mid && right<=end){
      if(arr[left]<=arr[right]){
      temp[index]=arr[left];
      index++;
      left++ ; 
    }
      else{
      temp[index]=arr[right];
      index++;
      right++;

      
    }
  }
   // left array is not empty
    while(left<=mid){
      temp[index]=arr[left];
        index++;
        left++;
    }
    // right array is not empty
    while(right<=end){
      temp[index]=arr[right];
      index++;
      right++;
    }
    // put these value in array
     index=0;
    while(start<=end){
      arr[start]=temp[index];
      start++;
      index++;
    }
  
  
  }

void mergesort(vector<int>&arr,int start,int end){
  int mid=start+(end-start)/2;
  if(start==end)
  return;
  mergesort(arr,start,mid); // left side
  mergesort(arr,mid+1,end);// right side

   combine(arr,start,mid,end);



 }

    vector<int> sortArray(vector<int>& nums) {
        mergesort(nums,0,nums.size()-1);
        return nums;
    }
};
