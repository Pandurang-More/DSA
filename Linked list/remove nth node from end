with 2 pass:


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int count=0;
        ListNode* temp=head;

     
        while(temp)
        {
            count++;
            temp=temp->next;
        }

        count=count-n;
        if(count==0)
        {
            temp=head;
            head=head->next;
            delete temp;
            return head;
        }
          ListNode* pre=NULL;
          ListNode* curr=head;
        
        while(count)
        {
            count--;
            pre=curr;

            curr=curr->next;
        }

         pre->next=curr->next;
         delete curr;
     return head;
    }
};



Slow Fast pointer

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        // Dummy node before head (helps handle deletion of head cleanly)
        ListNode dummy(0, head);
        ListNode* fast = &dummy;
        ListNode* slow = &dummy;

        // Step 1: Move fast pointer n+1 steps ahead
        for (int i = 0; i <= n; i++) {
            fast = fast->next;
        }

        // Step 2: Move both pointers until fast reaches the end
        while (fast) {
            fast = fast->next;
            slow = slow->next;
        }

        // Step 3: slow is now at the previous node of the target
        ListNode* toDelete = slow->next;
        slow->next = slow->next->next;
        delete toDelete;

        // Step 4: return new head
        return dummy.next;
    }
};
Nth from the end  ==  (L - n)th node from the start
