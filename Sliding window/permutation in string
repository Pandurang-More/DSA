Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


class Solution {
public:
    bool checkInclusion(string s1, string s2)
     {
        vector<int>temp(26,0);
        int k=s1.size();
        for(int i=0;i<k;i++)
        {
            temp[s1[i]-'a']++;
        }
       
        
        for(int i=0;i<s2.length();i++)
        {   int wnidx=0,idx=i;
             vector<int>temp1(26,0);
            while(wnidx<k && idx<s2.length())
            {
                temp1[s2[idx]-'a']++;
                wnidx++;
                idx++;
            }
            if(temp==temp1)
            return true;
        }
        return false;
     }
     
};


tc:O(n*k)




class Solution {
public:
    bool checkInclusion(string s1, string s2)
    {
        int k = s1.size();
        int n = s2.size();
        if (k > n) return false;

        vector<int> count1(26, 0), count2(26, 0);

        // Count frequency of s1
        for (char c : s1) count1[c - 'a']++;

        // Initialize first window in s2
        for (int i = 0; i < k; i++) count2[s2[i] - 'a']++;

        if (count1 == count2) return true;

        // Slide the window
        for (int i = k; i < n; i++) {
            count2[s2[i] - 'a']++;           // add new char
            count2[s2[i - k] - 'a']--;       // remove old char

            if (count1 == count2) return true;
        }

        return false;
    }
};
tc:O(n);
