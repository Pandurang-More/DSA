Given two strings s and t of lengths m and n respectively, 
return the minimum window substring of s such that every character in t (including duplicates) 
is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?





class Solution {
public:
    string minWindow(string s, string t)
    {
        int total =t.size(); // how many char we have to find .ie substring
        vector<int>m(256,0);

        for(int i=0;i<t.size();i++)
           m[t[i]]++;

           int start=0,end=0,ans=INT_MAX,index=-1;
         // ans storing the minimum length of substring
         // index storing the starting index of our ans character.
           while(end<s.size())
           {
            m[s[end]]--;
            if(m[s[end]]>=0)
            total--;
            // decrease the size of window
            while(!total && start <=end)   // total zero means we found the sub but we are going to dec size
            {
                // update the length of substring
                if(ans>end-start+1)
                {
                 ans=end-start+1;
                index=start;
                }

                m[s[start]]++;
                if(m[s[start]]>0)
                total++;

                start++;
            }


            // increased the size of window
            end++;
           }

           if(index==-1)
           return "";

           string str;
           for(int i=index;i<index+ans;i++)
           {
            str+=s[i];
           }
           return str;
    }
};
